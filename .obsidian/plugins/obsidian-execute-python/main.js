/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var child_process = __toESM(require("child_process"));
var DEFAULT_SETTINGS = {
  pythonPath: "python",
  showCodeInPreview: true,
  showExitCode: false
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("python", this.processPythonCodeBlock.bind(this));
    this.registerEvent(
      this.app.workspace.on("markdown-preview-render", this.addRunButtons.bind(this))
    );
  }
  processPythonCodeBlock(source, el, ctx) {
    let noInput = source.includes("#noinput");
    source = source.replace("#noinput\n", "");
    source = source.replace("#noinput", "");
    if (this.settings.showCodeInPreview) {
      let codeBlock = el.createEl("pre");
      codeBlock.innerHTML = `<code class="language-python">${source}</code>`;
    }
    const outputArea = el.createEl("div", { cls: "python-output", attr: { style: "white-space: pre-wrap;" } });
    this.runPythonCode(source, outputArea, noInput);
  }
  addRunButtons(mdView, el) {
    el.querySelectorAll("pre.language-python").forEach((block) => {
      var _a;
      let noInput = block.textContent.includes("#noinput");
      if (this.settings.showCodeInPreview) {
        let codeBlock = block.createEl("pre");
        codeBlock.innerHTML = block.innerHTML;
      }
      const source = ((_a = block.querySelector("code")) == null ? void 0 : _a.textContent) || "";
      const outputArea = block.createEl("div", { cls: "python-output", attr: { style: "white-space: pre-wrap;" } });
      this.runPythonCode(source, outputArea, noInput);
    });
  }
  async runPythonCode(source, outputArea, noInput = false) {
    outputArea.innerHTML = "";
    let inputField;
    let submitButton;
    if (!noInput) {
      inputField = outputArea.createEl("input", { attr: { type: "text" } });
      submitButton = outputArea.createEl("button", { text: "Submit Input" });
    }
    let runButton = outputArea.createEl("button", { text: "Start" });
    let resetButton = outputArea.createEl("button", { text: "Reset" });
    let outputPre = null;
    let pythonProcess;
    let handleOutput;
    const reset = () => {
      pythonProcess && pythonProcess.kill();
      inputField && (inputField.value = "");
      outputPre && outputArea.removeChild(outputPre);
      outputPre = null;
    };
    const run = async () => {
      pythonProcess = child_process.spawn(this.settings.pythonPath, ["-u", "-c", source]);
      const submitInput = () => {
        pythonProcess.stdin.write(inputField.value + "\n");
        inputField.value = "";
      };
      if (!noInput) {
        submitButton.addEventListener("click", submitInput);
        inputField.addEventListener("keyup", (event) => {
          if (event.key === "Enter") {
            submitInput();
          }
        });
      }
      handleOutput = new Promise((resolve, reject) => {
        pythonProcess.stdout.on("data", (data) => {
          if (!outputPre) {
            outputPre = outputArea.createEl("pre");
          }
          outputPre.append(data.toString());
        });
        pythonProcess.stderr.on("data", (data) => {
          if (!outputPre) {
            outputPre = outputArea.createEl("pre");
          }
          outputPre.append(`Error: ${data}`);
        });
        pythonProcess.on("close", (code) => {
          if (this.settings.showExitCode) {
            if (!outputPre) {
              outputPre = outputArea.createEl("pre");
            }
            outputPre.append(`
Python exited with code: ${code}`);
          }
          resolve();
        });
        pythonProcess.on("error", (err) => {
          reject(err);
        });
      });
      try {
        await handleOutput;
      } catch (err) {
        if (!outputPre) {
          outputPre = outputArea.createEl("pre");
        }
        outputPre.append(`
An error occurred: ${err}`);
      }
    };
    runButton.addEventListener("click", run);
    resetButton.addEventListener("click", reset);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Execute Python Settings" });
    new import_obsidian.Setting(containerEl).setName("Python").setDesc("The command used to invoke Python on your system. (ex. python or python3)").addText((text) => text.setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Toggle code snippet").setDesc("Always show or hide Python code in the markdown preview.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showCodeInPreview).onChange(async (value) => {
      this.plugin.settings.showCodeInPreview = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show exit code").setDesc("Toggle whether to show the exit code message after code execution.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showExitCode).onChange(async (value) => {
      this.plugin.settings.showExitCode = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blZpZXcsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiwgQXBwLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xuICAgIHB5dGhvblBhdGg6IHN0cmluZztcbiAgICBzaG93Q29kZUluUHJldmlldzogYm9vbGVhbjtcbiAgICBzaG93RXhpdENvZGU6IGJvb2xlYW47XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgcHl0aG9uUGF0aDogJ3B5dGhvbicsXG4gICAgc2hvd0NvZGVJblByZXZpZXc6IHRydWUsXG4gICAgc2hvd0V4aXRDb2RlOiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBNeVBsdWdpblNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoJ3B5dGhvbicsIHRoaXMucHJvY2Vzc1B5dGhvbkNvZGVCbG9jay5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ21hcmtkb3duLXByZXZpZXctcmVuZGVyJywgdGhpcy5hZGRSdW5CdXR0b25zLmJpbmQodGhpcykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvY2Vzc1B5dGhvbkNvZGVCbG9jayhzb3VyY2U6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50LCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpIHtcbiAgICAgICAgbGV0IG5vSW5wdXQgPSBzb3VyY2UuaW5jbHVkZXMoXCIjbm9pbnB1dFwiKTtcblx0c291cmNlID0gc291cmNlLnJlcGxhY2UoXCIjbm9pbnB1dFxcblwiLCBcIlwiKTtcblx0c291cmNlID0gc291cmNlLnJlcGxhY2UoXCIjbm9pbnB1dFwiLCBcIlwiKTsgICAgICAgIFxuXG5cdGlmICh0aGlzLnNldHRpbmdzLnNob3dDb2RlSW5QcmV2aWV3KSB7XG4gICAgICAgICAgICBsZXQgY29kZUJsb2NrID0gZWwuY3JlYXRlRWwoJ3ByZScpO1xuICAgICAgICAgICAgY29kZUJsb2NrLmlubmVySFRNTCA9IGA8Y29kZSBjbGFzcz1cImxhbmd1YWdlLXB5dGhvblwiPiR7c291cmNlfTwvY29kZT5gO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3V0cHV0QXJlYSA9IGVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3B5dGhvbi1vdXRwdXQnLCBhdHRyOiB7c3R5bGU6ICd3aGl0ZS1zcGFjZTogcHJlLXdyYXA7J30gfSk7XG5cbiAgICAgICAgdGhpcy5ydW5QeXRob25Db2RlKHNvdXJjZSwgb3V0cHV0QXJlYSwgbm9JbnB1dCk7XG4gICAgfVxuXG4gICAgYWRkUnVuQnV0dG9ucyhtZFZpZXc6IE1hcmtkb3duVmlldywgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZS5sYW5ndWFnZS1weXRob24nKS5mb3JFYWNoKChibG9jazogSFRNTFByZUVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBub0lucHV0ID0gYmxvY2sudGV4dENvbnRlbnQuaW5jbHVkZXMoXCIjbm9pbnB1dFwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dDb2RlSW5QcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVCbG9jayA9IGJsb2NrLmNyZWF0ZUVsKCdwcmUnKTtcbiAgICAgICAgICAgICAgICBjb2RlQmxvY2suaW5uZXJIVE1MID0gYmxvY2suaW5uZXJIVE1MO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBibG9jay5xdWVyeVNlbGVjdG9yKCdjb2RlJyk/LnRleHRDb250ZW50IHx8ICcnO1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0QXJlYSA9IGJsb2NrLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3B5dGhvbi1vdXRwdXQnLCBhdHRyOiB7c3R5bGU6ICd3aGl0ZS1zcGFjZTogcHJlLXdyYXA7J30gfSk7XG5cbiAgICAgICAgICAgIHRoaXMucnVuUHl0aG9uQ29kZShzb3VyY2UsIG91dHB1dEFyZWEsIG5vSW5wdXQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBydW5QeXRob25Db2RlKHNvdXJjZTogc3RyaW5nLCBvdXRwdXRBcmVhOiBIVE1MRWxlbWVudCwgbm9JbnB1dDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIG91dHB1dEFyZWEuaW5uZXJIVE1MID0gJyc7ICAvLyBDbGVhciB0aGUgb3V0cHV0IGFyZWEgYmVmb3JlIGVhY2ggcnVuXG5cbiAgICAgICAgbGV0IGlucHV0RmllbGQ7XG4gICAgICAgIGxldCBzdWJtaXRCdXR0b247XG4gICAgICAgIGlmICghbm9JbnB1dCkge1xuICAgICAgICAgICAgaW5wdXRGaWVsZCA9IG91dHB1dEFyZWEuY3JlYXRlRWwoJ2lucHV0JywgeyBhdHRyOiB7dHlwZTogJ3RleHQnfSB9KTtcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbiA9IG91dHB1dEFyZWEuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1N1Ym1pdCBJbnB1dCcgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJ1bkJ1dHRvbiA9IG91dHB1dEFyZWEuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1N0YXJ0JyB9KTtcbiAgICAgICAgbGV0IHJlc2V0QnV0dG9uID0gb3V0cHV0QXJlYS5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnUmVzZXQnIH0pO1xuICAgICAgICBsZXQgb3V0cHV0UHJlID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGxldCBweXRob25Qcm9jZXNzOiBjaGlsZF9wcm9jZXNzLkNoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcztcbiAgICAgICAgbGV0IGhhbmRsZU91dHB1dDogUHJvbWlzZTx2b2lkPjtcblxuICAgICAgICBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIHB5dGhvblByb2Nlc3MgJiYgcHl0aG9uUHJvY2Vzcy5raWxsKCk7XG4gICAgICAgICAgICBpbnB1dEZpZWxkICYmIChpbnB1dEZpZWxkLnZhbHVlID0gJycpO1xuICAgICAgICAgICAgb3V0cHV0UHJlICYmIG91dHB1dEFyZWEucmVtb3ZlQ2hpbGQob3V0cHV0UHJlKTtcbiAgICAgICAgICAgIG91dHB1dFByZSA9IG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcnVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcHl0aG9uUHJvY2VzcyA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24odGhpcy5zZXR0aW5ncy5weXRob25QYXRoLCBbJy11JywgJy1jJywgc291cmNlXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdElucHV0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHB5dGhvblByb2Nlc3Muc3RkaW4ud3JpdGUoaW5wdXRGaWVsZC52YWx1ZSArIFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIGlucHV0RmllbGQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghbm9JbnB1dCkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN1Ym1pdElucHV0KTtcbiAgICAgICAgICAgICAgICBpbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdElucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlT3V0cHV0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHB5dGhvblByb2Nlc3Muc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvdXRwdXRQcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFByZSA9IG91dHB1dEFyZWEuY3JlYXRlRWwoJ3ByZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFByZS5hcHBlbmQoZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHB5dGhvblByb2Nlc3Muc3RkZXJyLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvdXRwdXRQcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFByZSA9IG91dHB1dEFyZWEuY3JlYXRlRWwoJ3ByZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFByZS5hcHBlbmQoYEVycm9yOiAke2RhdGF9YCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBweXRob25Qcm9jZXNzLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dFeGl0Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvdXRwdXRQcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRQcmUgPSBvdXRwdXRBcmVhLmNyZWF0ZUVsKCdwcmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFByZS5hcHBlbmQoYFxcblB5dGhvbiBleGl0ZWQgd2l0aCBjb2RlOiAke2NvZGV9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcHl0aG9uUHJvY2Vzcy5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaGFuZGxlT3V0cHV0O1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvdXRwdXRQcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0UHJlID0gb3V0cHV0QXJlYS5jcmVhdGVFbCgncHJlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dHB1dFByZS5hcHBlbmQoYFxcbkFuIGVycm9yIG9jY3VycmVkOiAke2Vycn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBydW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4pO1xuICAgICAgICByZXNldEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc2V0KTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG5cbmNsYXNzIE15UGx1Z2luU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogTXlQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNeVBsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGxldCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnRXhlY3V0ZSBQeXRob24gU2V0dGluZ3MnfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnUHl0aG9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgY29tbWFuZCB1c2VkIHRvIGludm9rZSBQeXRob24gb24geW91ciBzeXN0ZW0uIChleC4gcHl0aG9uIG9yIHB5dGhvbjMpJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHl0aG9uUGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVG9nZ2xlIGNvZGUgc25pcHBldCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnQWx3YXlzIHNob3cgb3IgaGlkZSBQeXRob24gY29kZSBpbiB0aGUgbWFya2Rvd24gcHJldmlldy4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb2RlSW5QcmV2aWV3KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0NvZGVJblByZXZpZXcgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgZXhpdCBjb2RlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUb2dnbGUgd2hldGhlciB0byBzaG93IHRoZSBleGl0IGNvZGUgbWVzc2FnZSBhZnRlciBjb2RlIGV4ZWN1dGlvbi4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFeGl0Q29kZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFeGl0Q29kZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxufVxuXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUEyRztBQUMzRyxvQkFBK0I7QUFRL0IsSUFBTSxtQkFBcUM7QUFBQSxFQUN2QyxZQUFZO0FBQUEsRUFDWixtQkFBbUI7QUFBQSxFQUNuQixjQUFjO0FBQ2xCO0FBRUEsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUd6QyxNQUFNLFNBQVM7QUFDWCxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLLGNBQWMsSUFBSSxtQkFBbUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUV6RCxTQUFLLG1DQUFtQyxVQUFVLEtBQUssdUJBQXVCLEtBQUssSUFBSSxDQUFDO0FBRXhGLFNBQUs7QUFBQSxNQUNELEtBQUssSUFBSSxVQUFVLEdBQUcsMkJBQTJCLEtBQUssY0FBYyxLQUFLLElBQUksQ0FBQztBQUFBLElBQ2xGO0FBQUEsRUFDSjtBQUFBLEVBRUEsdUJBQXVCLFFBQWdCLElBQWlCLEtBQW1DO0FBQ3ZGLFFBQUksVUFBVSxPQUFPLFNBQVMsVUFBVTtBQUMvQyxhQUFTLE9BQU8sUUFBUSxjQUFjLEVBQUU7QUFDeEMsYUFBUyxPQUFPLFFBQVEsWUFBWSxFQUFFO0FBRXRDLFFBQUksS0FBSyxTQUFTLG1CQUFtQjtBQUMxQixVQUFJLFlBQVksR0FBRyxTQUFTLEtBQUs7QUFDakMsZ0JBQVUsWUFBWSxpQ0FBaUM7QUFBQSxJQUMzRDtBQUVBLFVBQU0sYUFBYSxHQUFHLFNBQVMsT0FBTyxFQUFFLEtBQUssaUJBQWlCLE1BQU0sRUFBQyxPQUFPLHlC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
